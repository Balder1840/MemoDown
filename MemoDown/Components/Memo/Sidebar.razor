@inject ContextMenuService _contextMenuService
@inject MemoService _memoService
@implements IDisposable

<sidebar>
    <RadzenStack AlignItems="AlignItems.Center" Gap="0" class="rz-mx-auto h-100">
        <div class="avatar rz-mt-8">
            <RadzenImage Path="/images/avatar.jpg" />
        </div>
        <RadzenButton Text="新建" Icon="add" Shade="Shade.Light" class="btn-add" Click="@(args=> _contextMenuService.HandleSidebarBtnAddClick(args))" />

        <MemoPanelMenu Multiple="true" class="rz-scrollbars w-100">
            <MemoPanelMenuItem @key="RootMemo?.Id"
                               Value="RootMemo"
                               ShowArrow="false"
                               Expanded="true"
                               class="my-directory"
                               Click="OnMemoItemClick"
                               Selected="@(SelectedSidebarMemo?.FullPath == RootMemo?.FullPath)">
                <Template>
                    <span class="rz-navigation-item-text">@MemoConstants.MY_DIRECTORY</span>
                </Template>
                <ChildContent>
                    <MemoItems Memos="RootMemo?.Children"
                               CurrentMemo="SelectedSidebarMemo"
                               OnMenuItemClick=@OnMemoItemClick
                               OnMemoContextMenu="OnOpenContextMenu"
                               DirectoryOnly="true" />
                </ChildContent>
            </MemoPanelMenuItem>

            @* <MemoItems Memos="RootMemo?.Children" CurrentMemo="Selection" OnMenuItemClick=@OnMemoItemClick OnBtnMoreClick="OnMoreClick" DirectoryOnly="true" /> *@
        </MemoPanelMenu>
    </RadzenStack>
</sidebar>

@code {
    public MemoItem? RootMemo => _memoService.RootMemo;

    private MemoItem? SelectedSidebarMemo => _memoService.SelectedSidebarMemo;

    protected override void OnInitialized()
    {
        _memoService.OnSelectedSidebarMemoChanged += StateHasChanged;
        base.OnInitialized();
    }

    public void OnMemoItemClick(MemoMenuItemEventArgs args)
    {
        _memoService.SetSelectedSidebarMemo(args.Value as MemoItem);
        _memoService.SetSelectedMemoFromSidebar();
    }

    void OnOpenContextMenu(MemoContextMenuArgs args)
    {
        _contextMenuService.HandleOpenContextMenu(args);
    }

    public void Dispose()
    {
        _memoService.OnSelectedSidebarMemoChanged -= StateHasChanged;
    }
}
