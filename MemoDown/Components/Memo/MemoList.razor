@using System.Reactive.Subjects
@using System.Reactive.Linq

@inject MemoService _memoService
@* @inject Radzen.ContextMenuService ContextMenuService *@
@inject ContextMenuService _contextMenuService
@implements IDisposable

<list>
    <RadzenStack AlignItems="AlignItems.Center" Gap="0" class="rz-mx-auto h-100">
        <div class="list-search w-100">
            <RadzenFormField>
                <Start>
                    <RadzenIcon Icon="search" />
                </Start>
                <ChildContent>
                    <RadzenTextBox Value="@_filter" @oninput="searchTerm.OnNext" type="search" AutoComplete="false" Placeholder="搜索笔记" />
                </ChildContent>
            </RadzenFormField>
        </div>
        @if (SidebarMemo != null)
        {
            <div class="list-hd">
                <div class="path-name">@(SidebarMemo.Parent != null ? SidebarMemo.Name : MemoConstants.MY_DIRECTORY)</div>
            </div>
        }

        @if (memos != null && memos.Any())
        {
            <MemoPanelMenu class="rz-scrollbars w-100">
                <MemoItems Memos="memos"
                           CurrentMemo="Selection"
                           OnMenuItemClick=@OnMemoItemClick
                           OnMemoContextMenu="OnOpenContextMenu"
                           RenderChildren="false" />
            </MemoPanelMenu>
        }
        else
        {
            <div class="no-content">
                <div>
                    <i class="icon-empty"></i>
                    <p>没有找到文件</p>
                    <RadzenButton Text="新建笔记" Shade="Shade.Light" Variant="Variant.Flat" Click="OnBtnAddClick" />
                </div>
            </div>
        }
    </RadzenStack>
</list>

@code {
    private MemoItem? SidebarMemo;
    private MemoItem? Selection => _memoService.SelectedMemo;

    private Subject<ChangeEventArgs> searchTerm = new();
    private IDisposable? subscription;
    private IEnumerable<MemoItem>? memos;
    private string? _filter;

    protected override void OnInitialized()
    {
        _memoService.OnSelectedSidebarMemoChanged += OndSidebarMemoChanged;
        _memoService.OnSelectedMemoChanged += StateHasChanged;

        SidebarMemo = _memoService.SelectedSidebarMemo;
        memos = SidebarMemo?.Children;

        subscription = searchTerm
           .Throttle(TimeSpan.FromMilliseconds(350))
           .Select(e => (string?)e.Value)
           .Select(v => v?.Trim())
           .DistinctUntilChanged()
           .Select(SearchMemo)
           .Subscribe(ts =>
           {
               memos = ts;
               InvokeAsync(() =>
               {
                   _memoService.SetSelectedMemo(memos?.FirstOrDefault());
               });
           });

        base.OnInitialized();
    }

    private void OndSidebarMemoChanged()
    {
        SidebarMemo = _memoService.SelectedSidebarMemo;
        memos = SidebarMemo?.Children;
        _filter = null;
        searchTerm.OnNext(new ChangeEventArgs());

        InvokeAsync(StateHasChanged);
    }

    private IEnumerable<MemoItem>? SearchMemo(string? searchTerm = null)
    {
        _filter = searchTerm;
        return _memoService.SearchMemo(searchTerm);
    }

    public void OnMemoItemClick(MemoMenuItemEventArgs args)
    {
        _memoService.SetSelectedMemo(args.Value as MemoItem);
    }

    void OnOpenContextMenu(MemoContextMenuArgs args)
    {
        _contextMenuService.HandleOpenContextMenu(args);
    }

    void OnBtnAddClick(MouseEventArgs args)
    {
        var memo = _memoService.CreateFile(_memoService.SelectedSidebarMemo);
        _memoService.SetSelectedMemo(memo);
    }

    public void Dispose()
    {
        _memoService.OnSelectedMemoChanged -= OndSidebarMemoChanged;
        _memoService.OnSelectedMemoChanged -= StateHasChanged;
        subscription?.Dispose();
    }

    // void ShowContextMenuWithContent(MemoContextMenuArgs args) => ContextMenuService.Open(args.MouseArgs, ds =>
    // @<RadzenMenu Click="@(async arg => await OnMenuItemClick(arg,args.Memo))">
    //     <RadzenMenuItem Text="@MemoConstants.NEW_FILE" Value="@MemuEnum.CreateNote" Image="/images/markdown_20x20.png" ImageStyle="margin-right:0.5rem;" />
    //     <RadzenMenuItem Text="@MemoConstants.NEW_DIRECTORY" Value="@MemuEnum.CreateDiretory" Icon="folder" />
    //     <hr />
    //     <RadzenMenuItem Text="@MemoConstants.RENAME" Value="@MemuEnum.Rename" Icon="drive_file_rename_outline"></RadzenMenuItem>
    //     <hr />
    //     <RadzenMenuItem Text="@MemoConstants.DELETE" Value="@MemuEnum.Delete" Icon="delete"></RadzenMenuItem>
    // </RadzenMenu>
    //     );

    // void ShowContextMenuWithContent2(MemoContextMenuArgs args) => ContextMenuService.Open(args.MouseArgs, ds =>
    // @<RadzenMenu Click="OnMenuItemClick2">
    //     <RadzenMenuItem Text="@MemoConstants.NEW_FILE" Value="@MemuEnum.CreateNote" Image="/images/markdown_20x20.png" ImageStyle="margin-right:0.5rem;" />
    //     <RadzenMenuItem Text="@MemoConstants.NEW_DIRECTORY" Value="@MemuEnum.CreateDiretory" Icon="folder" />
    //     <hr />
    //     <RadzenMenuItem Text="@MemoConstants.RENAME" Value="@MemuEnum.Rename" Icon="drive_file_rename_outline"></RadzenMenuItem>
    //     <hr />
    //     <RadzenMenuItem Text="@MemoConstants.DELETE" Value="@MemuEnum.Delete" Icon="delete"></RadzenMenuItem>
    // </RadzenMenu>
    // );

    // async Task OnMenuItemClick(MenuItemEventArgs args, MemoItem memo)
    // {
    //     if (!args.Value.Equals(3) && !args.Value.Equals(4))
    //     {
    //         // ContextMenuService.Close();
    //         await Task.Delay(10);
    //     }
    // }

    // async Task OnMenuItemClick2(MenuItemEventArgs args)
    // {
    //     if (!args.Value.Equals(3) && !args.Value.Equals(4))
    //     {
    //         // ContextMenuService.Close();
    //         await Task.Delay(10);
    //     }
    // }
}
