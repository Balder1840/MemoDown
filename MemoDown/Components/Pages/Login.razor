@page "/login"
@using BlazorTurnstile
@using MemoDown.Helpers
@using MemoDown.Options
@using MemoDown.Validators
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.Extensions.Options
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@using System.Runtime.Serialization

@inject NavigationManager NavigationManager
@inject IOptionsSnapshot<MemoDownOptions> _options
@inject CloudflareTurnstileService _cloudflareTurnstileService

@* @rendermode InteractiveServer *@

<PageTitle>Sign In</PageTitle>
<PageScript Src="./Components/Pages/Login.razor.js?login" />

<RadzenCard class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px;">
    <EditForm method="post" OnValidSubmit="LoginUser" Model="FormModel" FormName="LoginUser" Enhance="true">
        @* <DataAnnotationsValidator /> *@
        <ObjectGraphDataAnnotationsValidator />
        <AccountValidation @ref="accountValidation" />
        <ValidationSummary />

        <div class="rz-login">
            <div class="rz-form">
                <div class="rz-form-row">
                    <label class="rz-label" for="username">UserName</label>
                    <div class="rz-form-input-wrapper">
                        <RadzenTextBox id="username" Name="UserCredentials.UserName" @bind-Value="UserCredentials.UserName" />
                        @* <ValidationMessage For="@(()=> UserCredentials.UserName)" /> *@
                    </div>
                </div>
                <div class="rz-form-row">
                    <label class="rz-label" for="password">Password</label>
                    <div class="rz-form-input-wrapper">
                        <RadzenPassword id="password" Name="UserCredentials.Password" @bind-Value="UserCredentials.Password" />
                        @* <ValidationMessage For="@(()=> UserCredentials.Password)" /> *@
                    </div>
                </div>
                @if (_options.Value.CloudflareTurnstile.Enable)
                {
                    <div class="rz-form-row" data-permanent>
                        <label class="rz-label"></label>
                        <div class="rz-form-input-wrapper">
                            <Turnstile @rendermode="RenderMode.InteractiveServer"
                                       SiteKey="@_options.Value.CloudflareTurnstile.SiteKey"
                                       Appearance="@TurnstileAppearance.Always"
                                       Execution="@TurnstileExecution.Render"
                                       Theme="@TurnstileTheme.Light" />
                        </div>
                    </div>
                }
                <div class="rz-form-row">
                    <label class="rz-label"></label>
                    <div class="rz-form-input-wrapper rz-login-buttons">
                        <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Text="Sign In" />
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</RadzenCard>

@code {
    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(Name = "")]
    public LoginFormModel FormModel { get; set; } = new LoginFormModel();

    [SupplyParameterFromForm]
    public Credentials UserCredentials { get; set; } = new Credentials();

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private AccountValidation? accountValidation;

    public async Task LoginUser()
    {
        accountValidation?.ClearErrors();

        if (_options.Value.CloudflareTurnstile.Enable)
        {
            // read users ip address
            // proxy? => https://learn.microsoft.com/aspnet/core/host-and-deploy/proxy-load-balancer?view=aspnetcore-8.0&WT.mc_id=DT-MVP-5001507
            var userIP = HttpContext.Connection.RemoteIpAddress;

            var turnstileResult = await _cloudflareTurnstileService.Verify(FormModel.TurnstileToken!, userIpAddress: userIP);

            if (!turnstileResult.Success)
            {
                var errors = new Dictionary<string, List<string>>();
                errors.Add("CloudflareTurnstile", turnstileResult.ErrorCodes.Select(m => $"Cloudflare Turnstile: {m}").ToList());
                accountValidation?.DisplayErrors(errors);
                return;
            }
        }

        var passwordHasher = new PasswordHasher();
        if (!string.IsNullOrWhiteSpace(_options.Value.Account.UserName) &&
            UserCredentials.UserName == _options.Value.Account.UserName &&
            passwordHasher.VerifyHashedPassword(_options.Value.Account.Password!, UserCredentials.Password!) == Microsoft.AspNetCore.Identity.PasswordVerificationResult.Success)
        {
            var claims = new List<Claim>
            {
                new Claim(type: ClaimTypes.Name, UserCredentials.UserName!)
            };
            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);

            var authProperties = new AuthenticationProperties
                {
                    IsPersistent = true
                };

            await HttpContext.SignInAsync(principal, authProperties);

            // only works when form with "Enhance" or Enhance=true
            // refers https://github.com/dotnet/aspnetcore/issues/53996#issuecomment-1976934727
            HttpContext.Response.Headers.Append("blazor-enhanced-nav-redirect-location", ReturnUrl ?? "/");
            HttpContext.Response.StatusCode = 200;

            // only works when form without "Enhance" or Enhance=false
            // but should use NavigationManager for blazor
            // HttpContext.Response.Redirect("/", true);

            // only works when form without "Enhance" or Enhance=false
            // NavigationManager.NavigateTo(ReturnUrl ?? "/", true);
        }
        else
        {
            var errors = new Dictionary<string, List<string>>();
            errors.Add("Account", new() { "UserName or Password is not correct." });
            accountValidation?.DisplayErrors(errors);
        }
    }

    public class LoginFormModel
    {
        [ValidateComplexType]
        public Credentials UserCredentials { get; set; } = new Credentials();

        [DataMember(Name = "cf-turnstile-response")]
        public string? TurnstileToken { get; set; }
    }

    public class Credentials
    {
        [Required(ErrorMessage = "UserName is required.")]
        public string? UserName { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string? Password { get; set; }
    }
}
