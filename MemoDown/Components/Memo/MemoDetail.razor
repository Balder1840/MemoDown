@using Blazor.Cherrydown.FileUpload
@inject MemoService _memoService
@inject IConfiguration _config
@inject MemoService _service

@implements IDisposable

<detail>
    <RadzenStack AlignItems="AlignItems.Center" Gap="0" class="h-100">
        @if (Memo != null)
        {
            <div class="hd w-100">
                <div class="title">@Memo.Name</div>
                <div class="toolbar">
                    @Memo.FullPath
                </div>
            </div>
            if (Memo.IsDirectory)
            {
                <div class="bd d-flex align-items-center justify-content-center w-100 h-100 ">
                    <i svg-icon="" svgname="dir_detail_default" class="dir-detail-default">
                        <svg style="display: inline-block; width: 100%; height: 100%" role="img" class="">
                            <use xlink:href="#dir_detail_default"></use>
                        </svg>
                    </i>
                </div>
            }
            else
            {
                <div class="markdown-container w-100">
                    <Cherrydown @bind-Markdown="_markdown" OnFileUpload="@SaveFile" @ref="Editor" />
                </div>
            }
        }
        else
        {
            <div svg-icon="" svgname="empty_logo" class="empty_logo flex-grow-1">
                <svg style="display: inline-block; width: 100%; height: 100%" role="img" class="">
                    <use xlink:href="#empty_logo"></use>
                </svg>
            </div>
        }
    </RadzenStack>
</detail>

@code {
    private MemoItem? Memo => _memoService.SelectedMemo;

    private MemoItem? _previousMemo = null;

    private string _markdown = string.Empty;

    private Cherrydown Editor = default!;

    protected override void OnInitialized()
    {
        _memoService.OnSelectedMemoChanged += StateHasChanged;
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (Memo != null && _previousMemo?.Id != Memo?.Id)
        {
            _markdown = _service.GetMarkdownContents(Memo!);
            _previousMemo = Memo;
            StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }

    // protected override bool ShouldRender()
    // {
    //     if (Memo != null && _previousMemo?.Id != Memo?.Id)
    //     {
    //         _previousMemo = Memo;
    //         return true;
    //     }
    //     return false;
    // }

    async Task SwitchMode()
    {
        await Editor.SwitchModeAsync(CherrydownMode.PreviewOnly);

        await Task.Delay(15 * 1000);

        await Editor.SwitchModeAsync(CherrydownMode.EditAndPreview);
    }

    private async Task<FileUploadResult> SaveFile(Blazor.Cherrydown.FileUpload.IBrowserFile file)
    {
        var workDir = _config.GetValue<string>("WorkDir");
        var workDirVirtualPath = _config.GetValue<string>("WorkDirVirtualPath");

        await using FileStream fs = new(Path.Combine(workDir, file.Name), FileMode.Create);
        await file.OpenReadStream(15 * 1024 * 1024).CopyToAsync(fs); // 15M

        return new FileUploadResult { FileUri = $"{workDirVirtualPath}/{file.Name}" };
    }

    public void Dispose()
    {
        _memoService.OnSelectedMemoChanged -= StateHasChanged;
    }
}
