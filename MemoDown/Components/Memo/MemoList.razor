@inject MemoService _memoService
@implements IDisposable

<list>
    <RadzenStack AlignItems="AlignItems.Center" Gap="0" class="rz-mx-auto h-100">
        <div class="list-search w-100">
            <RadzenFormField>
                <Start>
                    <RadzenIcon Icon="search" />
                </Start>
                <ChildContent>
                    <RadzenTextBox Placeholder="搜索笔记" />
                </ChildContent>
            </RadzenFormField>
        </div>
        @if (SidebarMemo != null)
        {
            <div class="list-hd">
                <div class="path-name">@(SidebarMemo.Parent != null ? SidebarMemo.Name : MemoConstants.MY_DIRECTORY)</div>
            </div>
        }

        @if (SidebarMemo?.Children != null && SidebarMemo.Children.Any())
        {
            <MemoPanelMenu class="rz-scrollbars w-100">
                <MemoItems Memos="SidebarMemo?.Children" CurrentMemo="Selection" OnMenuItemClick=@OnMemoItemClick OnBtnMoreClick="OnMoreClick" RenderChildren="false" />
            </MemoPanelMenu>
        }
        else
        {
            <div class="no-content">
                <div>
                    <i class="icon-empty"></i>
                    <p>没有找到文件</p>
                    <RadzenButton Text="新建笔记" Shade="Shade.Light" Variant="Variant.Flat" Click="OnBtnAddClick" />
                </div>
            </div>
        }
    </RadzenStack>
</list>

@code {
    private MemoItem? SidebarMemo => _memoService.SelectedSidebarMemo;
    private MemoItem? Selection => _memoService.SelectedMemo;

    protected override void OnInitialized()
    {
        _memoService.OnSelectedMemoChanged += StateHasChanged;
        base.OnInitialized();
    }

    public void OnMemoItemClick(MemoMenuItemEventArgs args)
    {
        _memoService.SetSelectedMemo(args.Value as MemoItem);
    }

    void OnMoreClick(MouseEventArgs args)
    {

    }

    void OnBtnAddClick(MouseEventArgs args)
    {
        var memo = _memoService.CreateFile(_memoService.SelectedSidebarMemo);
        _memoService.SetSelectedMemo(memo);
    }

    public void Dispose()
    {
        _memoService.OnSelectedMemoChanged -= StateHasChanged;
    }
}
