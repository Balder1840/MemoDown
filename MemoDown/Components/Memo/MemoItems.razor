@if (Memos != null && Memos.Any())
{
    @foreach (var memo in Memos.Where(m => !DirectoryOnly || m.IsDirectory).OrderByDescending(m => m.IsDirectory))
    {
        @if (RenderChildren && memo.Children != null && memo.Children.Any())
        {
            <MemoPanelMenuItem @key="memo.Id" @ref="children[memo.Id]" Value="memo"
                               Click="OnClick"
                               Selected="@(CurrentMemo?.FullPath == memo.FullPath)"
                               Expanded="IsExpended(memo,CurrentMemo)">
                <Template>
                    @if (memo.IsDirectory)
                    {
                        <i class="rzi rz-navigation-item-icon">folder</i>
                    }
                    else
                    {
                        <img class="rz-navigation-item-icon" src="/images/markdown_20x20.png" alt="md" />
                    }
                    <span class="rz-navigation-item-text">@memo.Name</span>
                    <i class="rzi rz-navigation-item-icon btn-more" @onclick="OnBtnMoreClick" @onclick:stopPropagation>more_horiz</i>
                </Template>
                <ChildContent>
                    <MemoItems Memos="memo.Children" CurrentMemo="CurrentMemo" OnMenuItemClick="OnClick" OnBtnMoreClick="OnBtnMoreClick"
                               DirectoryOnly="@DirectoryOnly" RenderChildren="@RenderChildren" />
                </ChildContent>
            </MemoPanelMenuItem>
        }
        else
        {
            <MemoPanelMenuItem @key="memo.Id" @ref="children[memo.Id]" Value="memo"
                               Click="OnClick"
                               Selected="@(CurrentMemo?.FullPath == memo.FullPath)">
                <Template>
                    @if (memo.IsDirectory)
                    {
                        <i class="rzi rz-navigation-item-icon">folder</i>
                    }
                    else
                    {
                        <img class="rz-navigation-item-icon" src="/images/markdown_20x20.png" alt="md" />
                    }
                    <span class="rz-navigation-item-text">@memo.Name</span>
                    <i class="rzi rz-navigation-item-icon btn-more" @onclick="OnBtnMoreClick" @onclick:stopPropagation>more_horiz</i>
                </Template>
            </MemoPanelMenuItem>
        }
    }
}

@code {
    [Parameter]
    public IEnumerable<MemoItem>? Memos { get; set; }

    [Parameter]
    public MemoItem? CurrentMemo { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnBtnMoreClick { get; set; }

    [Parameter]
    public EventCallback<MemoMenuItemEventArgs> OnMenuItemClick { get; set; }

    [Parameter]
    public bool DirectoryOnly { get; set; }

    [Parameter]
    public bool RenderChildren { get; set; } = true;

    private Dictionary<string, MemoPanelMenuItem> children = new Dictionary<string, MemoPanelMenuItem>();

    public async Task OnClick(MemoMenuItemEventArgs args)
    {
        var memo = args.Value as MemoItem;
        if (OnMenuItemClick.HasDelegate && CurrentMemo?.Id != memo?.Id)
        {
            await OnMenuItemClick.InvokeAsync(args);
        }
    }

    private bool IsExpended(MemoItem memo, MemoItem? currentMemo)
    {
        if (!children.ContainsKey(memo.Id))
        {
            return CurrentMemo?.FullPath.StartsWith(memo.FullPath) ?? false;
        }

        // keep expanded menu as it is
        var child = children[memo.Id];
        if (!child.Expanded)
        {
            return CurrentMemo?.FullPath.StartsWith(memo.FullPath) ?? false;
        }
        else
        {
            return true;
        }
    }
}
