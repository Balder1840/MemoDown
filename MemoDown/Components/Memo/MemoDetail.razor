@using Blazor.Cherrydown.FileUpload
@inject MemoService _memoService
@inject IOptions<MemoDownOptions> _options
@implements IDisposable

<detail>
    <RadzenStack AlignItems="AlignItems.Center" Gap="0" class="h-100">
        @if (Memo != null)
        {
            <div class="hd w-100">
                <div class="title">@Memo.Name</div>
                <div class="toolbar">
                    @if (!Memo.IsDirectory)
                    {
                        <MemoSavingButton OnSave="SaveMarkdownContent" />
                        <div class="hd-view-mode">
                            <RadzenProfileMenu Click="HandleSwitchMode">
                                <Template>
                                    <i title="模式切换" svg-icon="" svgname="md_switch" class="switch-icon">
                                        <svg style="display: inline-block; width: 100%; height: 100%" role="img" class="">
                                            <use xlink:href="#md_switch"></use>
                                        </svg>
                                    </i>
                                </Template>
                                <ChildContent>
                                    <RadzenProfileMenuItem Text="分屏编辑" Icon="splitscreen" Value="@CherrydownMode.EditAndPreview.ToString()" class="md-splitscreen" />
                                    <RadzenProfileMenuItem Text="所见即所得" Icon="wysiwyg" Value="@CherrydownMode.EditOnly.ToString()" />
                                    <RadzenProfileMenuItem Text="预览模式" Icon="remove_red_eye" Value="@CherrydownMode.PreviewOnly.ToString()" />
                                </ChildContent>
                            </RadzenProfileMenu>
                        </div>
                    }
                </div>
            </div>
            if (Memo.IsDirectory)
            {
                <div class="bd d-flex align-items-center justify-content-center w-100 h-100 ">
                    <i svg-icon="" svgname="dir_detail_default" class="dir-detail-default">
                        <svg style="display: inline-block; width: 100%; height: 100%" role="img" class="">
                            <use xlink:href="#dir_detail_default"></use>
                        </svg>
                    </i>
                </div>
            }
            else
            {
                <div class="markdown-container w-100">
                    <Cherrydown @ref="_cherrydownEditor"
                                OnFileUpload="_memoService.SaveUploadFile"
                                AfterInit="AfterEditorInit" />
                </div>
            }
        }
        else
        {
            <div svg-icon="" svgname="empty_logo" class="empty_logo flex-grow-1">
                <svg style="display: inline-block; width: 100%; height: 100%" role="img" class="">
                    <use xlink:href="#empty_logo"></use>
                </svg>
            </div>
        }
    </RadzenStack>
</detail>

@code {
    private MemoItem? Memo => _memoService.SelectedMemo;

    private string? _markdown;

    private Cherrydown _cherrydownEditor = default!;

    private Timer? _timer;
    private TimeSpan _autoSavingDueTime = TimeSpan.FromSeconds(30);
    private TimeSpan _autoSavingIntervalTime;

    protected override void OnInitialized()
    {
        _autoSavingIntervalTime = TimeSpan.FromSeconds(_options.Value.AutoSavingIntervalSecond);

        _memoService.OnSelectedMemoChanged += OnSelectedMemoChanged;
        _timer = new Timer(_ =>
        {
            InvokeAsync(async () =>
            {
                await SaveMarkdownContent();
            });

        }, null, _autoSavingDueTime, _autoSavingIntervalTime);

        base.OnInitialized();
    }

    private void AfterEditorInit()
    {
        _markdown = _memoService.GetMarkdownContents(Memo);
        _cherrydownEditor.SetValueAsync(_markdown);
    }

    private async Task SaveMarkdownContent()
    {
        try
        {
            if (Memo != null && !Memo.IsDirectory && !_memoService.IsSaving && _cherrydownEditor != null)
            {
                _memoService.IsSaving = true;

                await Task.Delay(200);

                var markdown = await _cherrydownEditor.GetValueAsync();
                if (_markdown != markdown)
                {
                    await _memoService.SaveMarkdownContents(Memo, markdown);

                    _markdown = markdown;
                }

                _memoService.IsSaving = false;
            }
        }
        catch { }
    }

    private void OnSelectedMemoChanged()
    {
        if (Memo == null || Memo.IsDirectory)
        {
            _timer?.Change(Timeout.Infinite, Timeout.Infinite);
        }
        else
        {
            _timer?.Change(_autoSavingDueTime, _autoSavingIntervalTime);
        }

        _markdown = _memoService.GetMarkdownContents(Memo);
        _cherrydownEditor?.SetValueAsync(_markdown);
        StateHasChanged();
    }

    private async Task HandleSwitchMode(RadzenProfileMenuItem e)
    {
        var mode = Enum.Parse<CherrydownMode>(e.Value);
        await _cherrydownEditor.SwitchModeAsync(mode);
    }

    public void Dispose()
    {
        _markdown = null;
        _memoService.OnSelectedMemoChanged -= OnSelectedMemoChanged;
        _timer?.Dispose();
    }
}
